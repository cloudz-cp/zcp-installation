common:
  resources: &100m-256Mi
    requests:
      memory: 256Mi
      cpu: 100m
  tolerations: &tolerations
  - effect: NoSchedule
    key: management
    operator: Equal
    value: "true"
  affinity: &affinity
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - amd64
          - key: role
            operator: In
            values:
            - management

expose:
  # Set the way how to expose the service. Set the type as "ingress", 
  # "clusterIP" or "nodePort" and fill the information in the corresponding 
  # section
  type: ingress
  tls:
    enabled: true
    secretName: "cloudzcp-io-cert"
  ingress:
    hosts:
      core: eks-dev-registry.cloudzcp.io                                 # CHANGE
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"

externalURL: https://eks-dev-registry.cloudzcp.io                         # CHANGE
persistence:
  enabled: true
  persistentVolumeClaim:
    registry:
      existingClaim: ""
      storageClass: "zcp-efs"
      subPath: "registry"
      accessMode: ReadWriteOnce
      size: 20Gi
    chartmuseum:
      existingClaim: ""
      storageClass: "zcp-efs"
      subPath: "chartmuseum"
      accessMode: ReadWriteOnce
      size: 5Gi
    jobservice: 
      existingClaim: ""
      storageClass: "zcp-efs"
      subPath: "jobservice"
      accessMode: ReadWriteOnce
      size: 20Gi
    database:
      existingClaim: ""
      storageClass: "zcp-efs"
      subPath: "database"
      accessMode: ReadWriteOnce
      size: 20Gi
    redis:
      existingClaim: ""
      storageClass: "zcp-efs"
      subPath: "redis"
      accessMode: ReadWriteOnce
      size: 5Gi
  imageChartStorage:
    type: s3
    filesystem:
      rootdirectory: /storage
    s3:
      region: ap-northeast-2
      accesskey: AKIAW5RE27CGNQM5FVIY
      secretkey: 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
      bucket: zcp-registry-eks-test
      
imagePullPolicy: IfNotPresent

logLevel: debug
# The initial password of Harbor admin. Change it from portal after launching Harbor
harborAdminPassword: "Harbor12345"
# The secret key used for encryption. Must be a string of 16 chars.
secretKey: "not-a-secure-key"


portal:
  image:
    repository: goharbor/harbor-portal
    tag: v1.7.6
  replicas: 1
  nodeSelector: {}
  resources: *100m-256Mi
  tolerations: *tolerations
  affinity: *affinity
  ## Additional deployment annotations
  podAnnotations: {}

core:
  image:
    repository: goharbor/harbor-core
    tag: v1.7.6
  replicas: 1
  nodeSelector: {}
  resources: *100m-256Mi
  tolerations: *tolerations
  affinity: *affinity
  ## Additional deployment annotations
  podAnnotations: {}

adminserver:
  image:
    repository: goharbor/harbor-adminserver
    tag: v1.7.6
  replicas: 1
  nodeSelector: {}
  resources: *100m-256Mi
  tolerations: *tolerations
  affinity: *affinity

jobservice:
  image:
    repository: goharbor/harbor-jobservice
    tag: v1.7.6
  replicas: 1
  maxJobWorkers: 10
  # The logger for jobs: "file", "database" or "stdout"
  jobLogger: file
# resources:
#   requests:
#     memory: 256Mi
#     cpu: 100m
  nodeSelector: {}
  resources: *100m-256Mi
  tolerations: *tolerations
  affinity: *affinity
  ## Additional deployment annotations
  podAnnotations: {}

registry:
  registry:
    image:
      repository: goharbor/registry-photon
      tag: v2.6.2-v1.7.6
  controller:
    image:
      repository: goharbor/harbor-registryctl
      tag: v1.7.6
  replicas: 1 
  nodeSelector: {}
  resources: *100m-256Mi
  tolerations: *tolerations
  affinity: *affinity
  ## Additional deployment annotations
  podAnnotations: {}

chartmuseum:
  enabled: true
  image:
    repository: goharbor/chartmuseum-photon
    tag: v0.8.1-v1.7.6
  replicas: 1 
  nodeSelector: {}
  resources: *100m-256Mi
  tolerations: *tolerations
  affinity: *affinity
  ## Additional deployment annotations
  podAnnotations: {}

clair:
  enabled: true
  image:
    repository: goharbor/clair-photon
    tag: v2.0.8-v1.7.6
  replicas: 1
  # The http(s) proxy used to update vulnerabilities database from internet
  httpProxy:
  httpsProxy:
  # The interval of clair updaters, the unit is hour, set to 0 to 
  # disable the updaters
  updatersInterval: 12 
  nodeSelector: {}
  resources: *100m-256Mi
  tolerations: *tolerations
  affinity: *affinity
  ## Additional deployment annotations
  podAnnotations: {}

notary:
  enabled: false

database:
  # if external database is used, set "type" to "external"
  # and fill the connection informations in "external" section
  type: internal
  internal:
    image:
      repository: goharbor/harbor-db
      tag: v1.7.6
    # The initial superuser password for internal database
    password: "changeit" 
    nodeSelector: {}
    resources: *100m-256Mi
    tolerations: *tolerations
    affinity: *affinity
  podAnnotations: {}

redis:
  # if external Redis is used, set "type" to "external"
  # and fill the connection informations in "external" section
  type: internal
  internal:
    image:
      repository: goharbor/redis-photon
      tag: v1.7.6 
    nodeSelector: {}
    resources: *100m-256Mi
    tolerations: *tolerations
    affinity: *affinity
 
